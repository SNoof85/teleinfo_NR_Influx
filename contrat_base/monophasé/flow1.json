[
   {
      "id":"f3a5252a.f20a38",
      "type":"debug",
      "z":"eb54216.5ae55e",
      "name":"",
      "active":false,
      "tosidebar":true,
      "console":false,
      "tostatus":false,
      "complete":"true",
      "targetType":"full",
      "x":1310,
      "y":240,
      "wires":[
         
      ]
   },
   
      "id":"de7b3947.70b9d8",
      "type":"function",
      "z":"eb54216.5ae55e",
      "name":"Structure payload",
      "func":"function isNumeric(n) { \n      return !isNaN(parseFloat(n)) && isFinite(n); \n}\n\n// Pour tous les labels \nfor (var label in msg.payload ) {\n    var value = msg.payload[label];\n    \n\t// Correction des valeurs type string en numérique \t\t\n\tif (label == \"OPTARIF\")\t{\n  \t\t// L'option tarifaire choisie (Groupe \"OPTARIF\") est codée sur 4 caractères alphanumériques \n  \t\t// J'ai pris un nombre arbitraire codé dans l'ordre ci-dessous \n  \t\t// je mets le 4eme char à 0, trop de possibilités \n      \tvalue = value.substring(0, 3);\n    \n       \tif      (value==\"BAS\") value=1;// BASE => Option Base. \n  \t\telse if (value==\"HC.\") value=2;// HC.. => Option Heures Creuses. \n  \t\telse if (value==\"EJP\") value=3;// EJP. => Option EJP. \n  \t\telse if (value==\"BBR\") value=4;// BBRx => Option Tempo\n  \t\telse value = 0;\n  \t\t\n  \t\tmsg.payload[label] = value;\n\t} else if (label==\"HHPHC\") {\n      // L'horaire heures pleines/heures creuses (Groupe \"HHPHC\") est codé par un caractère A à Y \n      // J'ai choisi de prendre son code ASCII\n      msg.payload[label] = value.charCodeAt();\n    } else if ( label == \"PTEC\") {\n      // La période tarifaire en cours (Groupe \"PTEC\"), est codée sur 4 caractères \n      // J'ai pris un nombre arbitraire codé dans l'ordre ci-dessous\n      if      (value==\"TH..\") value= 1; // Toutes les Heures. \n      else if (value==\"HC..\") value= \"Heures Creuses\"; // Heures Creuses. \n      else if (value==\"HP..\") value= \"Heures Pleines\"; // Heures Pleines. \n      else if (value==\"HN..\") value= 4; // Heures Normales. \n      else if (value==\"PM..\") value= 5; // Heures de Pointe Mobile. \n      else if (value==\"HCJB\") value= 6; // Heures Creuses Jours Bleus. \n      else if (value==\"HCJW\") value= 7; // Heures Creuses Jours Blancs (White). \n      else if (value==\"HCJR\") value= 8; // Heures Creuses Jours Rouges. \n      else if (value==\"HPJB\") value= 9; // Heures Pleines Jours Bleus. \n      else if (value==\"HPJW\") value= 10;// Heures Pleines Jours Blancs (White). \n      else if (value==\"HPJR\") value= 11;// Heures Pleines Jours Rouges. \n      else value = 0;\n      \n      msg.payload[label] = value;\n    } else if ( label == \"IINST\") {\n        delete msg.payload.IINST;\n        msg.payload.IINST = Number(value)\n    } else if ( label == \"IMAX\") {\n        delete msg.payload.IMAX;\n        msg.payload.IMAX1 = Number(value);\n    } else if ( isNumeric(value) && label != \"ADCO\" ) {\n        // Transformer les valeurs numériques\n        msg.payload[label] = Number(value);\n    }\n}\n\n// Sauvegarde dans le contexte global\ncontext.global.teleinfo = msg.payload;\n\nreturn msg;",
      "outputs":1,
      "noerr":0,
      "x":670,
      "y":420,
      "wires":[
         [
            "a59761b.7aa89a",
            "be937898.322178",
            "dac8bdd2.8a9c1",
            "e27cf9a4.9d24b8"
         ]
      ]
   },
   {
      "id":"d960cde9.a42de",
      "type":"serial in",
      "z":"eb54216.5ae55e",
      "name":"",
      "serial":"40ca77b1.eab5e8",
      "x":90,
      "y":420,
      "wires":[
         [
            "dba46d7e.3b0c4"
         ]
      ]
   },
   {
      "id":"a59761b.7aa89a",
      "type":"function",
      "z":"eb54216.5ae55e",
      "name":"INDEX WH",
      "func":"var INDEX = msg.payload.BASE\n\nmsg.payload = INDEX\nreturn msg;",
      "outputs":1,
      "noerr":0,
      "x":910,
      "y":220,
      "wires":[
         [
            "e869b9fe.7be1e8"
         ]
      ]
   },
   {
      "id":"1d02e19d.5964fe",
      "type":"function",
      "z":"eb54216.5ae55e",
      "name":"valide trame",
      "func":"// La trame complète est reçue dans 'msg'\nvar teleinfo={};\n\n// Enlever les codes début et fin de trame et récupérer les lignes 1 à 1\nvar lines = msg.payload.toString().replace(\"\\u0002\\n\",\"\").replace(\"\\r\\u0003\",\"\");\nlines = lines.split(\"\\r\\n\");\n\n// Pour chaque ligne\nfor (var line in lines) {\n\tvar i;\n  \tvar checksum = 32;\n  \t\n  \t// Recupérer le label, la valeur et la checksum\n  \t// si la checksum est un espace on le remplace par un caractère non \n  \t// autorisé en checksum (ici 's') pour eviter pb de split\n  \t// donc espace espace devient espace s\n\tvar myline = lines[line].toString().replace(\"  \",\" s\").split(\" \");\n\t\n\t// on dépile nos 3 valeurs\n\tvar check = myline.pop();\n\tvar value = myline.pop();\n\tvar label = myline.pop();\n\t\n\t// On peu repositionner la checksum à espace si c'était le cas\n\tif (check == \"s\") check = \" \";\n\n\t// Calcul de la checksum sur ce qu'on a reçu, on balaye tous les caractères\t\t\n  \tfor (i = 0; i < label.length; i++) checksum += label.charCodeAt(i);\n  \tfor (i = 0; i < value.length; i++) checksum += value.charCodeAt(i);\n \tchecksum = ((checksum%256) & 63) + 32;\n \tchecksum = String.fromCharCode(checksum);\n\t\n\t// Checksum correcte ?\n \tif (checksum == check ) {\n\t\tteleinfo[label] = value;\n\t} else {\n\t\tconsole.log(\"'%s' '%s' '%s' => Bad Checksum '%s'\", label, value, check, checksum );\n\t}\n}\nreturn [ { payload: teleinfo } ];",
      "outputs":1,
      "noerr":0,
      "x":470,
      "y":420,
      "wires":[
         [
            "de7b3947.70b9d8",
            "4556a689.2f9698"
         ]
      ]
   },
   {
      "id":"e869b9fe.7be1e8",
      "type":"rbe",
      "z":"eb54216.5ae55e",
      "name":"",
      "func":"rbe",
      "gap":"",
      "start":"",
      "inout":"out",
      "property":"payload",
      "x":1130,
      "y":220,
      "wires":[
         [
            "f3a5252a.f20a38",
            "f42e2f0c.4bf5a",
            "b8657ce5.66446"
         ]
      ]
   },
   {
      "id":"be937898.322178",
      "type":"function",
      "z":"eb54216.5ae55e",
      "name":"INDEX KWH",
      "func":"var INDEX = msg.payload.BASE\n\nmsg.payload = INDEX / 1000\nreturn msg;",
      "outputs":1,
      "noerr":0,
      "x":910,
      "y":420,
      "wires":[
         [
            "7eb8f451.0583dc"
         ]
      ]
   },
   {
      "id":"7eb8f451.0583dc",
      "type":"rbe",
      "z":"eb54216.5ae55e",
      "name":"",
      "func":"rbe",
      "gap":"",
      "start":"",
      "inout":"out",
      "property":"payload",
      "x":1130,
      "y":420,
      "wires":[
         [
            "4efbc51e.5157dc",
            "9bd3d335.1db56"
         ]
      ]
   },
   {
      "id":"4efbc51e.5157dc",
      "type":"debug",
      "z":"eb54216.5ae55e",
      "name":"",
      "active":false,
      "tosidebar":true,
      "console":false,
      "tostatus":false,
      "complete":"true",
      "targetType":"full",
      "x":1310,
      "y":440,
      "wires":[
         
      ]
   },
   {
      "id":"e27cf9a4.9d24b8",
      "type":"function",
      "z":"eb54216.5ae55e",
      "name":"IINST",
      "func":"var IINST = msg.payload.IINST\n\nmsg.payload = IINST\nreturn msg;",
      "outputs":1,
      "noerr":0,
      "x":890,
      "y":620,
      "wires":[
         [
            "e85e7b0d.bf3498"
         ]
      ]
   },
   {
      "id":"8cf17c41.5f3b8",
      "type":"debug",
      "z":"eb54216.5ae55e",
      "name":"",
      "active":false,
      "tosidebar":true,
      "console":false,
      "tostatus":false,
      "complete":"true",
      "targetType":"full",
      "x":1310,
      "y":640,
      "wires":[
         
      ]
   },
   {
      "id":"e85e7b0d.bf3498",
      "type":"rbe",
      "z":"eb54216.5ae55e",
      "name":"",
      "func":"rbe",
      "gap":"",
      "start":"",
      "inout":"out",
      "property":"payload",
      "x":1130,
      "y":620,
      "wires":[
         [
            "8cf17c41.5f3b8",
            "894f911e.e101b"
         ]
      ]
   },
   {
      "id":"dba46d7e.3b0c4",
      "type":"delay",
      "z":"eb54216.5ae55e",
      "name":"",
      "pauseType":"rate",
      "timeout":"5",
      "timeoutUnits":"seconds",
      "rate":"1",
      "nbRateUnits":"15",
      "rateUnits":"second",
      "randomFirst":"1",
      "randomLast":"5",
      "randomUnits":"seconds",
      "drop":true,
      "x":280,
      "y":420,
      "wires":[
         [
            "1d02e19d.5964fe",
            "5f91a580.c0505c"
         ]
      ]
   },
   {
      "id":"dac8bdd2.8a9c1",
      "type":"debug",
      "z":"eb54216.5ae55e",
      "name":"",
      "active":false,
      "tosidebar":true,
      "console":false,
      "tostatus":false,
      "complete":"true",
      "targetType":"full",
      "x":670,
      "y":320,
      "wires":[
         
      ]
   },
   {
      "id":"4556a689.2f9698",
      "type":"debug",
      "z":"eb54216.5ae55e",
      "name":"",
      "active":false,
      "tosidebar":true,
      "console":false,
      "tostatus":false,
      "complete":"true",
      "targetType":"full",
      "x":470,
      "y":320,
      "wires":[
         
      ]
   },
   {
      "id":"5f91a580.c0505c",
      "type":"debug",
      "z":"eb54216.5ae55e",
      "name":"",
      "active":false,
      "tosidebar":true,
      "console":false,
      "tostatus":false,
      "complete":"true",
      "targetType":"full",
      "x":290,
      "y":320,
      "wires":[
         
      ]
   },
   {
      "id":"2d9fa26f.83b87e",
      "type":"influxdb out",
      "z":"eb54216.5ae55e",
      "influxdb":"506ad1a9.81606",
      "name":"index Wh",
      "measurement":"Wh",
      "precision":"",
      "retentionPolicy":"",
      "x":1320,
      "y":200,
      "wires":[
         
      ]
   },
   {
      "id":"f42e2f0c.4bf5a",
      "type":"function",
      "z":"eb54216.5ae55e",
      "name":"",
      "func":"var INDEX_WH = msg.payload;\nmsg.payload = [];\nfields = {\"value\":INDEX_WH};\ntags =  {\"entity\":\"teleinfo\"};\nmsg.payload = [fields,tags];\nreturn msg;",
      "outputs":1,
      "noerr":0,
      "x":1130,
      "y":160,
      "wires":[
         [
            "f5a13858.2c1278",
            "2d9fa26f.83b87e"
         ]
      ]
   },
   {
      "id":"f5a13858.2c1278",
      "type":"debug",
      "z":"eb54216.5ae55e",
      "name":"",
      "active":false,
      "tosidebar":true,
      "console":false,
      "tostatus":false,
      "complete":"true",
      "targetType":"full",
      "x":1310,
      "y":160,
      "wires":[
         
      ]
   },
   {
      "id":"9bd3d335.1db56",
      "type":"function",
      "z":"eb54216.5ae55e",
      "name":"",
      "func":"var INDEX_KWH = msg.payload;\nmsg.payload = [];\nfields = {\"value\":INDEX_KWH};\ntags =  {\"entity\":\"teleinfo\"};\nmsg.payload = [fields,tags];\nreturn msg;",
      "outputs":1,
      "noerr":0,
      "x":1130,
      "y":360,
      "wires":[
         [
            "a66ee790.9208d8",
            "a0145d3b.b2da7"
         ]
      ]
   },
   {
      "id":"a66ee790.9208d8",
      "type":"influxdb out",
      "z":"eb54216.5ae55e",
      "influxdb":"506ad1a9.81606",
      "name":"index kWh",
      "measurement":"kWh",
      "precision":"",
      "retentionPolicy":"",
      "x":1330,
      "y":400,
      "wires":[
         
      ]
   },
   {
      "id":"a0145d3b.b2da7",
      "type":"debug",
      "z":"eb54216.5ae55e",
      "name":"",
      "active":false,
      "tosidebar":true,
      "console":false,
      "tostatus":false,
      "complete":"true",
      "targetType":"full",
      "x":1310,
      "y":360,
      "wires":[
         
      ]
   },
   {
      "id":"894f911e.e101b",
      "type":"function",
      "z":"eb54216.5ae55e",
      "name":"",
      "func":"var IINST = msg.payload;\nmsg.payload = [];\nfields = {\"value\":IINST};\ntags =  {\"entity\":\"teleinfo\"};\nmsg.payload = [fields,tags];\nreturn msg;",
      "outputs":1,
      "noerr":0,
      "x":1130,
      "y":560,
      "wires":[
         [
            "d95d5fe0.33b13",
            "13b71288.38316d"
         ]
      ]
   },
   {
      "id":"d95d5fe0.33b13",
      "type":"influxdb out",
      "z":"eb54216.5ae55e",
      "influxdb":"506ad1a9.81606",
      "name":"IINST A",
      "measurement":"A",
      "precision":"",
      "retentionPolicy":"",
      "x":1320,
      "y":600,
      "wires":[
         
      ]
   },
   {
      "id":"13b71288.38316d",
      "type":"debug",
      "z":"eb54216.5ae55e",
      "name":"",
      "active":false,
      "tosidebar":true,
      "console":false,
      "tostatus":false,
      "complete":"true",
      "targetType":"full",
      "x":1310,
      "y":560,
      "wires":[
         
      ]
   },
   {
      "id":"b8657ce5.66446",
      "type":"link out",
      "z":"eb54216.5ae55e",
      "name":"index Wh out",
      "links":[
         "eeedfbd8.5cdbc8"
      ],
      "x":1495,
      "y":220,
      "wires":[
         
      ]
   },
   {
      "id":"40ca77b1.eab5e8",
      "type":"serial-port",
      "serialport":"/dev/ttyUSB0",
      "serialbaud":"1200",
      "databits":"7",
      "parity":"even",
      "stopbits":"1",
      "waitfor":"",
      "newline":"0x3",
      "bin":"false",
      "out":"char",
      "addchar":"",
      "responsetimeout":"10000"
   },
   {
      "id":"506ad1a9.81606",
      "type":"influxdb",
      "hostname":"192.168.1.10",
      "port":"8086",
      "protocol":"http",
      "database":"edf",
      "name":"EDF",
      "usetls":false,
      "tls":"",
      "influxdbVersion":"1.x"
   }
]
